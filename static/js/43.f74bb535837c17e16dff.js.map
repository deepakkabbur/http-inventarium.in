{"version":3,"sources":["webpack:///static/js/43.f74bb535837c17e16dff.js","webpack:///./src/apps/shared/dialog/components/Dialog.vue","webpack:///src/apps/shared/dialog/components/Dialog.vue","webpack:///./src/apps/shared/dialog/components/Dialog.vue?7cb4","webpack:///./src/apps/shared/dialog/components/Dialog.vue?fea6","webpack:///./node_modules/dialog-polyfill/dialog-polyfill.js","webpack:///(webpack)/buildin/amd-define.js","webpack:///./src/apps/shared/dialog/components/Dialog.vue?62ed"],"names":["webpackJsonp","256","module","__webpack_exports__","__webpack_require__","injectStyle","ssrContext","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dialog_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_19e195d2_hasScoped_true_transformToRequire_video_src_poster_source_src_img_src_image_xlink_href_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dialog_vue__","normalizeComponent","__vue_styles__","Component","274","__WEBPACK_IMPORTED_MODULE_0_dialog_polyfill__","n","name","props","displayCancleButton","type","Boolean","default","methods","showModal","this","$refs","dialog","closeModal","close","$emit","327","exports","content","i","locals","328","push","version","sources","names","mappings","file","sourceRoot","329","__WEBPACK_AMD_DEFINE_RESULT__","createsStackingContext","el","document","body","s","window","getComputedStyle","invalid","k","ok","undefined","opacity","position","webkitOverflowScrolling","parentElement","findNearestDialog","localName","safeBlur","blur","inNodeList","nodeList","node","length","isFormMethodDialog","hasAttribute","getAttribute","toLowerCase","dialogPolyfillInfo","dialog_","replacedStyleTop_","openAsModal_","setAttribute","show","bind","returnValue","MutationObserver","maybeHideModal","observe","attributes","attributeFilter","timeout","removed","cb","downgradeModal","delayModel","ev","target","cand","substr","clearTimeout","setTimeout","forEach","addEventListener","set","setOpen","get","backdrop_","createElement","className","backdropClick_","supportCustomEvent","CustomEvent","event","x","createEvent","initCustomEvent","bubbles","cancelable","detail","prototype","Event","contains","style","zIndex","top","parentNode","removeChild","dialogPolyfill","dm","removeDialog","removeAttribute","e","focus","fake","insertBefore","firstChild","tabIndex","redirectedEvent","initMouseEvent","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","dispatchEvent","stopPropagation","focus_","querySelector","opts","query","map","join","activeElement","updateZIndex","dialogZ","backdropZ","Error","open","pushDialog","console","warn","needsCentering","reposition","nextSibling","opt_returnValue","closeEvent","element","scrollTop","documentElement","topValue","innerHeight","offsetHeight","Math","max","isInlinePositionSetByStylesheet","styleSheets","styleSheet","cssRules","j","rule","selectedNodes","querySelectorAll","selectorText","cssTop","getPropertyValue","cssBottom","bottom","forceRegisterDialog","HTMLDialogElement","registerDialog","DialogManager","pendingDialogStack","checkDOM","checkDOM_","overlay","forwardTab_","handleKey_","handleFocus_","zIndexLow_","zIndexHigh_","mo_","records","rec","c","removedNodes","Element","concat","blockDocument","childList","subtree","unblockDocument","removeEventListener","disconnect","updateStacking","dpi","last","appendChild","containedByTopDialog_","candidate","preventDefault","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","keyCode","cancelEvent","slice","indexOf","allowed","unshift","index","splice","formSubmitter","useValue","testForm","method","methodDescriptor","getOwnPropertyDescriptor","HTMLFormElement","realGet","call","realSet","v","defaultPrevented","form","offsetX","offsetY","nativeFormSubmit","submit","replacementFormSubmit","330","331","render","_vm","_h","$createElement","_c","_self","ref","staticClass","_t","_v","directives","rawName","expression","attrs","on","click","staticRenderFns","esExports"],"mappings":"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","file":"static/js/43.f74bb535837c17e16dff.js","sourcesContent":["webpackJsonp([43],{\n\n/***/ 256:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dialog_vue__ = __webpack_require__(274);\n/* empty harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_19e195d2_hasScoped_true_transformToRequire_video_src_poster_source_src_img_src_image_xlink_href_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dialog_vue__ = __webpack_require__(331);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(327)\n}\nvar normalizeComponent = __webpack_require__(26)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-19e195d2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dialog_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_19e195d2_hasScoped_true_transformToRequire_video_src_poster_source_src_img_src_image_xlink_href_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dialog_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 274:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_dialog_polyfill__ = __webpack_require__(329);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_dialog_polyfill___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_dialog_polyfill__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'dialog-view',\n  props: {\n    displayCancleButton: {\n      type: Boolean,\n      default: true\n    }\n  },\n  methods: {\n    showModal: function showModal() {\n      this.$refs.dialog.showModal();\n    },\n    closeModal: function closeModal() {\n      this.$refs.dialog.close();\n      this.$emit('cancel');\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 327:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(328);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(205)(\"20845c9d\", content, true, {});\n\n/***/ }),\n\n/***/ 328:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(204)(true);\n// imports\nexports.push([module.i, \"@import url(https://cdnjs.cloudflare.com/ajax/libs/dialog-polyfill/0.4.10/dialog-polyfill.min.css);\", \"\"]);\n\n// module\nexports.push([module.i, \"\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"Dialog.vue\",\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 329:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;(function() {\n\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n      var invalid = function(k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      }\n      if (s.opacity < 1 ||\n          invalid('zIndex', 'auto') ||\n          invalid('transform', 'none') ||\n          invalid('mixBlendMode', 'normal') ||\n          invalid('filter', 'none') ||\n          invalid('perspective', 'none') ||\n          s['isolation'] === 'isolate' ||\n          s.position === 'fixed' ||\n          s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n      el = el.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return /** @type {HTMLDialogElement} */ (el);\n      }\n      el = el.parentElement;\n    }\n    return null;\n  }\n\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n      var cb = function() {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n      var timeout;\n      var delayModel = function(ev) {\n        if (ev.target !== dialog) { return; }  // not for a child element\n        var cand = 'DOMNodeRemoved';\n        removed |= (ev.type.substr(0, cand.length) === cand);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n\n  dialogPolyfillInfo.prototype = {\n\n    get dialog() {\n      return this.dialog_;\n    },\n\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function() {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }\n      this.downgradeModal();\n    },\n\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function() {\n      if (!this.openAsModal_) { return; }\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = '';\n\n      // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      }\n\n      // Clear the backdrop and remove from the manager.\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function(value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal();  // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function(e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function() {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function(el) {\n          return el + ':not([disabled])';\n        });\n        // TODO(samthor): tabindex values that are not numeric are not focusable.\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function(dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function() {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function() {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' +\n            'This may cause it to be unusable. For more information, see this link: ' +\n            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n\n      this.setOpen(true);\n      this.openAsModal_ = true;\n\n      // Optionally center vertically, relative to the current viewport.\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      }\n\n      // Insert backdrop.\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n      // Focus on whatever inside the dialog.\n      this.focus_();\n    },\n\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function(opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n      this.setOpen(false);\n\n      // Leave returnValue untouched in case it was set directly on the element\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      }\n\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n\n  };\n\n  var dialogPolyfill = {};\n\n  dialogPolyfill.reposition = function(element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n\n  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null;\n      // Some browsers throw on cssRules.\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n      if (!cssRules) { continue; }\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null;\n        // Ignore errors on invalid selector texts.\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch(e) {}\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n        if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dialogPolyfill.needsCentering = function(dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    }\n\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n        (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n      return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n\n  /**\n   * @param {!Element} element to force upgrade\n   */\n  dialogPolyfill.forceRegisterDialog = function(element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' +\n          'may not work correctly', element);\n    }\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n  };\n\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n  dialogPolyfill.registerDialog = function(element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  dialogPolyfill.DialogManager = function() {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n\n    var checkDOM = this.checkDOM_.bind(this);\n\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function(e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]);  // sanity-check DOM\n    }.bind(this));\n\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n\n    this.forwardTab_ = undefined;\n\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function(records) {\n        var removed = [];\n        records.forEach(function(rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n  dialogPolyfill.DialogManager.prototype.blockDocument = function() {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n  };\n\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n  dialogPolyfill.DialogManager.prototype.updateStacking = function() {\n    var zIndex = this.zIndexHigh_;\n\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    }\n\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0;  // only valid if top-most\n        }\n      }\n      candidate = candidate.parentElement;\n    }\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n    if (this.containedByTopDialog_(event.target)) { return; }\n\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(/** @type {Element} */ (event.target));\n\n    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {  // forward\n        dpi.focus_();\n      } else {  // backwards\n        document.documentElement.focus();\n      }\n    } else {\n      // TODO: Focus after the dialog, is ignored.\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function(dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) { return; }\n\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n    this.updateStacking();\n  };\n\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n  if (window.HTMLDialogElement === undefined) {\n\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n        methodDescriptor.get = function() {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n          return realGet.call(this);\n        };\n        var realSet = methodDescriptor.set;\n        methodDescriptor.set = function(v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n          return realSet.call(this, v);\n        };\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener('click', function(ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n      if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n      var target = /** @type {Element} */ (ev.target);\n      if (!target || !isFormMethodDialog(target.form)) { return; }\n\n      var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) { return; }\n        // this is a <input type=\"image\">, which can submit forms\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n\n      var dialog = findNearestDialog(target);\n      if (!dialog) { return; }\n\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n    document.addEventListener('submit', function(ev) {\n      var form = /** @type {HTMLFormElement} */ (ev.target);\n      if (!isFormMethodDialog(form)) { return; }\n      ev.preventDefault();\n\n      var dialog = findNearestDialog(form);\n      if (!dialog) { return; }\n\n      // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n      var s = dialogPolyfill.formSubmitter;\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n\n  if (\"function\" === 'function' && 'amd' in __webpack_require__(330)) {\n    // AMD support\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return dialogPolyfill; }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();\n\n\n/***/ }),\n\n/***/ 330:\n/***/ (function(module, exports) {\n\nmodule.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n/***/ }),\n\n/***/ 331:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('dialog',{ref:\"dialog\",staticClass:\"mdl-dialog\"},[_vm._t(\"dialog-body\"),_vm._v(\" \"),_c('div',{staticClass:\"mdl-dialog__actions\"},[_vm._t(\"dialog-actions\"),_vm._v(\" \"),_c('button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.displayCancleButton),expression:\"displayCancleButton\"}],staticClass:\"mdl-button close\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.closeModal}},[_vm._v(\"Cancle\")])],2)],2)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/43.f74bb535837c17e16dff.js","function injectStyle (ssrContext) {\n  require(\"!!../../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-19e195d2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Dialog.vue\")\n}\nvar normalizeComponent = require(\"!../../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Dialog.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Dialog.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-19e195d2\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Dialog.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-19e195d2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apps/shared/dialog/components/Dialog.vue\n// module id = 256\n// module chunks = 43","<template>\n  <div>\n    <!-- <button type=\"button\"\n      class=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored custom-button--primary custom-button--right\"\n      @click=\"showModal\">\n      <slot name=\"button-text\"></slot>\n    </button> -->\n    <dialog class=\"mdl-dialog\" ref=\"dialog\">\n      <slot name=\"dialog-body\"></slot>\n      <div class=\"mdl-dialog__actions\">\n        <slot name=\"dialog-actions\">\n        </slot>\n        <button type=\"button\" class=\"mdl-button close\" @click=\"closeModal\" v-show=\"displayCancleButton\">Cancle</button>\n      </div>\n    </dialog>\n  </div>\n</template>\n<script>\nimport 'dialog-polyfill'\nexport default {\n  name: 'dialog-view',\n  props: {\n    displayCancleButton: {\n      type: Boolean,\n      default: true\n    }\n  },\n  methods: {\n    showModal () {\n      this.$refs.dialog.showModal()\n    },\n    closeModal () {\n      this.$refs.dialog.close()\n      this.$emit('cancel')\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n  @import url('https://cdnjs.cloudflare.com/ajax/libs/dialog-polyfill/0.4.10/dialog-polyfill.min.css')\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/apps/shared/dialog/components/Dialog.vue","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-19e195d2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../../../node_modules/sass-loader/lib/loader.js?{\\\"sourceMap\\\":true}!../../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./Dialog.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"20845c9d\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/extract-text-webpack-plugin/dist/loader.js?{\"omit\":1,\"remove\":true}!./node_modules/vue-style-loader!./node_modules/css-loader?{\"minimize\":true,\"sourceMap\":true}!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-19e195d2\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/sass-loader/lib/loader.js?{\"sourceMap\":true}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/apps/shared/dialog/components/Dialog.vue\n// module id = 327\n// module chunks = 43","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\nexports.push([module.id, \"@import url(https://cdnjs.cloudflare.com/ajax/libs/dialog-polyfill/0.4.10/dialog-polyfill.min.css);\", \"\"]);\n\n// module\nexports.push([module.id, \"\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"Dialog.vue\",\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"minimize\":true,\"sourceMap\":true}!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-19e195d2\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/sass-loader/lib/loader.js?{\"sourceMap\":true}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/apps/shared/dialog/components/Dialog.vue\n// module id = 328\n// module chunks = 43","(function() {\n\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n      var invalid = function(k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      }\n      if (s.opacity < 1 ||\n          invalid('zIndex', 'auto') ||\n          invalid('transform', 'none') ||\n          invalid('mixBlendMode', 'normal') ||\n          invalid('filter', 'none') ||\n          invalid('perspective', 'none') ||\n          s['isolation'] === 'isolate' ||\n          s.position === 'fixed' ||\n          s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n      el = el.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return /** @type {HTMLDialogElement} */ (el);\n      }\n      el = el.parentElement;\n    }\n    return null;\n  }\n\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n      var cb = function() {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n      var timeout;\n      var delayModel = function(ev) {\n        if (ev.target !== dialog) { return; }  // not for a child element\n        var cand = 'DOMNodeRemoved';\n        removed |= (ev.type.substr(0, cand.length) === cand);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n\n  dialogPolyfillInfo.prototype = {\n\n    get dialog() {\n      return this.dialog_;\n    },\n\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function() {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }\n      this.downgradeModal();\n    },\n\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function() {\n      if (!this.openAsModal_) { return; }\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = '';\n\n      // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      }\n\n      // Clear the backdrop and remove from the manager.\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function(value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal();  // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function(e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function() {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function(el) {\n          return el + ':not([disabled])';\n        });\n        // TODO(samthor): tabindex values that are not numeric are not focusable.\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function(dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function() {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function() {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' +\n            'This may cause it to be unusable. For more information, see this link: ' +\n            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n\n      this.setOpen(true);\n      this.openAsModal_ = true;\n\n      // Optionally center vertically, relative to the current viewport.\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      }\n\n      // Insert backdrop.\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n      // Focus on whatever inside the dialog.\n      this.focus_();\n    },\n\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function(opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n      this.setOpen(false);\n\n      // Leave returnValue untouched in case it was set directly on the element\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      }\n\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n\n  };\n\n  var dialogPolyfill = {};\n\n  dialogPolyfill.reposition = function(element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n\n  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null;\n      // Some browsers throw on cssRules.\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n      if (!cssRules) { continue; }\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null;\n        // Ignore errors on invalid selector texts.\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch(e) {}\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n        if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dialogPolyfill.needsCentering = function(dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    }\n\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n        (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n      return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n\n  /**\n   * @param {!Element} element to force upgrade\n   */\n  dialogPolyfill.forceRegisterDialog = function(element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' +\n          'may not work correctly', element);\n    }\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n  };\n\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n  dialogPolyfill.registerDialog = function(element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  dialogPolyfill.DialogManager = function() {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n\n    var checkDOM = this.checkDOM_.bind(this);\n\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function(e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]);  // sanity-check DOM\n    }.bind(this));\n\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n\n    this.forwardTab_ = undefined;\n\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function(records) {\n        var removed = [];\n        records.forEach(function(rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n  dialogPolyfill.DialogManager.prototype.blockDocument = function() {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n  };\n\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n  dialogPolyfill.DialogManager.prototype.updateStacking = function() {\n    var zIndex = this.zIndexHigh_;\n\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    }\n\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0;  // only valid if top-most\n        }\n      }\n      candidate = candidate.parentElement;\n    }\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n    if (this.containedByTopDialog_(event.target)) { return; }\n\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(/** @type {Element} */ (event.target));\n\n    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {  // forward\n        dpi.focus_();\n      } else {  // backwards\n        document.documentElement.focus();\n      }\n    } else {\n      // TODO: Focus after the dialog, is ignored.\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function(dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) { return; }\n\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n    this.updateStacking();\n  };\n\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n  if (window.HTMLDialogElement === undefined) {\n\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n        methodDescriptor.get = function() {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n          return realGet.call(this);\n        };\n        var realSet = methodDescriptor.set;\n        methodDescriptor.set = function(v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n          return realSet.call(this, v);\n        };\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener('click', function(ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n      if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n      var target = /** @type {Element} */ (ev.target);\n      if (!target || !isFormMethodDialog(target.form)) { return; }\n\n      var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) { return; }\n        // this is a <input type=\"image\">, which can submit forms\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n\n      var dialog = findNearestDialog(target);\n      if (!dialog) { return; }\n\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n    document.addEventListener('submit', function(ev) {\n      var form = /** @type {HTMLFormElement} */ (ev.target);\n      if (!isFormMethodDialog(form)) { return; }\n      ev.preventDefault();\n\n      var dialog = findNearestDialog(form);\n      if (!dialog) { return; }\n\n      // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n      var s = dialogPolyfill.formSubmitter;\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n\n  if (typeof define === 'function' && 'amd' in define) {\n    // AMD support\n    define(function() { return dialogPolyfill; });\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dialog-polyfill/dialog-polyfill.js\n// module id = 329\n// module chunks = 43","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-define.js\n// module id = 330\n// module chunks = 43","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('dialog',{ref:\"dialog\",staticClass:\"mdl-dialog\"},[_vm._t(\"dialog-body\"),_vm._v(\" \"),_c('div',{staticClass:\"mdl-dialog__actions\"},[_vm._t(\"dialog-actions\"),_vm._v(\" \"),_c('button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.displayCancleButton),expression:\"displayCancleButton\"}],staticClass:\"mdl-button close\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.closeModal}},[_vm._v(\"Cancle\")])],2)],2)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-19e195d2\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/apps/shared/dialog/components/Dialog.vue\n// module id = 331\n// module chunks = 43"],"sourceRoot":""}